module Sorting_33 #(
    parameter DATA_WIDTH = 8,
    parameter NUM_ELEMS  = 16,
    parameter INDEX_WIDTH = 4
)(
    input  wire clk,
    input  wire rst,
    input  wire start,
    input  wire [0:NUM_ELEMS*DATA_WIDTH-1] unsorted_data,
    output reg  [0:NUM_ELEMS*DATA_WIDTH-1] sorted_data,
    output reg  [0:NUM_ELEMS*INDEX_WIDTH-1] sorted_indices,
    output reg  done
);

    reg [DATA_WIDTH-1:0] data_array [0:NUM_ELEMS-1];
    reg [INDEX_WIDTH-1:0] index_array [0:NUM_ELEMS-1];
    reg [DATA_WIDTH-1:0] temp_data;
    reg [INDEX_WIDTH-1:0] temp_index;

    integer i;

    localparam IDLE = 2'b00, LOAD = 2'b01, SORT = 2'b10, DONE = 2'b11;
    reg [1:0] current_state, next_state;

    reg [4:0] bit_pos;
    
    always @(posedge clk or posedge rst) begin
        if (rst)
            current_state <= IDLE;
        else
            current_state <= next_state;
    end

    always @(*) begin
        case (current_state)
            IDLE:  next_state = start ? LOAD : IDLE;
            LOAD:  next_state = SORT;
            SORT:  next_state = (bit_pos == 0) ? DONE : SORT;
            DONE:  next_state = IDLE;
            default: next_state = IDLE;
        endcase
    end

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            done <= 0;
            bit_pos <= DATA_WIDTH - 1;
        end else begin
            case (current_state)
                IDLE: begin
                    done <= 0;
                    bit_pos <= DATA_WIDTH - 1;
                end

                LOAD: begin
                    for (i = 0; i < NUM_ELEMS; i = i + 1) begin
                        data_array[i] <= unsorted_data[i*DATA_WIDTH +: DATA_WIDTH];
                        index_array[i] <= i[INDEX_WIDTH-1:0];
                    end
                    bit_pos <= DATA_WIDTH - 1;
                end

                SORT: begin
                    for (i = 0; i < NUM_ELEMS - 1; i = i + 1) begin
                        if ((data_array[i][bit_pos] > data_array[i+1][bit_pos]) ||
                            ((data_array[i][bit_pos] == data_array[i+1][bit_pos]) &&
                             (data_array[i] > data_array[i+1]))) begin
                            
                            temp_data = data_array[i];
                            data_array[i] = data_array[i+1];
                            data_array[i+1] = temp_data;

                            temp_index = index_array[i];
                            index_array[i] = index_array[i+1];
                            index_array[i+1] = temp_index;
                        end
                    end
                    bit_pos <= bit_pos - 1;
                end

                DONE: begin
                    done <= 1;
                    for (i = 0; i < NUM_ELEMS; i = i + 1) begin
                        sorted_data[i*DATA_WIDTH +: DATA_WIDTH] <= data_array[i];
                        sorted_indices[i*INDEX_WIDTH +: INDEX_WIDTH] <= index_array[i];
                    end
                end
            endcase
        end
    end

endmodule
